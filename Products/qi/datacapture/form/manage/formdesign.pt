<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="qiteamspace">
<head metal:fill-slot="javascript_head_slot">
	<script type="text/javascript">
	document.onmousemove=movemouse
	document.onmouseup=unclick
	var mousepos
	function movemouse(eventval)
	{
		eventval=eventval || window.event
		mousepos=updatemouse(eventval)
		if (grabbed!=null)
		{
			moveto(mousepos.x, mousepos.y)
			//grabbed.style.x=mousepos.x
			//grabbed.style.y=mousepos.y
		}
	}
	
	function moveto(x,y)
	{
		output=document.getElementById('currentvalue')
		follow=document.getElementById("follower")
		if (grabbed!=null)
		{
			/*
			grabbed.style.position="absolute"
			grabbed.style.left=x+10+'px'
			grabbed.style.top=y+10+'px'
			*/
		}
		//output.value="moveto called "+follow.left+", "+follow.style.top+"["+x+","+y+"]"
		follow.style.left=x+10+'px'
		follow.style.top=y+10+'px'
		//output.value="bwaha"
	}
	
	function updatemouse(ev){ 
	    if(ev.pageX || ev.pageY){ 
	        return {x:ev.pageX, y:ev.pageY}; 
	    } 
	    return { 
	        x:ev.clientX + document.body.scrollLeft - document.body.clientLeft, 
	        y:ev.clientY + document.body.scrollTop  - document.body.clientTop 
	    };
	}
	
	var grabbed=null
	function clicked(obj)
	{
		follow=document.getElementById("follower")
		follow.style.display="block"
		moveto(mousepos.x, mousepos.y)
		output=document.getElementById('currentvalue')
		output.value=obj+' click '
		grabbed=obj
		if (obj != null)
		{
			obj.style.borderStyle='solid'
			obj.style.borderWidth='1px'
			obj.style.borderColor='lightgreen'
		}
		
		return false
	}
	function unclick(obj)
	{
		output=document.getElementById('currentvalue')
		output.value=grabbed+' unclick '

		follow=document.getElementById("follower")
		follow.style.display="none"
		if (grabbed!=null)
		{
			grabbed.style.borderWidth='0px'
		}
		if (hovered!=null && grabbed!=null)
		{
			arrow=locateArrow(hovered)
			arrow.style.display="none"

			clone=grabbed.cloneNode(true)
			//clone.style.position="relative"
			output.value="this far 1"
	        parentthingy=hoveredparent
	        realhovered=document.getElementById(hoveredid)
			parentthingy.insertBefore(clone, realhovered)
			output.value="this far 2"
			grabbedparent=grabbed.parentNode
			grabbedparent.removeChild(grabbed)
			
			//output.value=grabbed.attributes.getNamedItem('name').value+" dropped on "+hovered.attributes.getNamedItem('name').value
		}
		grabbed=null
	}
	function test()
	{
		return false
	}
	function generalexit(obj)
	{
		mainhovered=null
		if (grabbed!=null)
		{
			
		}
	}
	function generalenter(obj)
	{
		mainhovered=obj
		if (grabbed!=null)
		{
			
		}
	}

	
	function locateArrow(obj)
	{
	    /*
		nodes=obj.childNodes
		for(var i=0; i<nodes.length;i++)
		{
			node=nodes[i]
			if (node.attributes)
			{
				name=node.attributes.getNamedItem('name')
				if (name && name.value=='uparrow')
					return node
				if(name)
				{
			    }
			}
		}
		return null*/
		return obj.getElementsByTagName("img")[0]
		
	}
	
	function entered(obj)
	{
	    //alert('obj was '+obj.name)
	    try
	    {
	        //alert(obj.parentNode)
	        hoveredparent=obj.parentNode
        }
        catch (e)
        {
            alert('could not do it ' +e)
        }
        hoveredid=obj.id
		hovered=obj
		if (grabbed!=null)
		{
			arrow=locateArrow(obj)
			if(arrow)
				arrow.style.display='block'
			//obj.style.borderTopWidth='1px';
		}
	}
	function exited(obj)
	{
		hovered=null
		arrow=locateArrow(obj)
		if (arrow)
			arrow.style.display="none"
		if (grabbed!=null)
		{
		
		}
		//obj.style.borderTopWidth='0px';
	}
	
	function filter()
	{
	    
	    filtertext=document.getElementById("filter").value.toLowerCase()

	    
	    divsearched=document.getElementById("allavailmeasures")
	    nodes=divsearched.childNodes
	    
	    for(var i=0; i<nodes.length;i++)
	    {

	        node=nodes.item(i)
	        measuredivinfo=checkmeasurediv(node)
	        if (measuredivinfo!=null)
	        {
	            result=measuredivinfo.indexOf(filtertext)
	            if (result>-1)
	            {
	                //show
	                
	                node.setAttribute("style","display:Block")
                }
                else
                {
                    
                    node.setAttribute("style","display:None")
                    //hide
                }
            }
        }
        
    }
    
    function checkmeasurediv(node)
    {
        if (node.nodeType==1)
        {
            name=node.attributes.getNamedItem("name")
            if(name!=null)
            {
                return name.value.toLowerCase();
            }
            
        }
        return null;
    }
	
	</script>

</head>
<body>
	<div metal:fill-slot="main">
		<h3 tal:condition="not:view/dbform">Create Data Entry Form</h3>
		<h3 tal:condition="view/dbform">Edit Data Entry Form</h3>
		<p class="description">
			You can drag and drop measures onto your form. To reorder the measures, 
			click a measure to move.
			The order measures appear here is the same order that teams will see when entering data.
		</p>
		

		<div metal:use-macro="context/@@errormacro/macros/errorlist" />
		<img class="follower" id="follower"
			src="plus.png" />
		<div class="mainsection status">
			<input id="currentvalue" type="hidden" style="vertical-alignment: top;width: 300px;" />
		</div>
        <table>
            <tr>
                <td style="vertical-align:top">
		<div class="mainsection currentform" value="add"
			onmouseover="generalenter(this)" onmouseout="generalexit(this)">
			<form action="." method="post" tal:attributes="action view/url">
				<tal:formname define="
					inputkey string:formname;
					required python:True;
					fieldtext string:Form Name;
					value python:view.dbform and view.dbform.name or '';
					description string:Enter the name of your data entry form.;" >
					<div metal:use-macro="context/@@inputmacro/macros/validatedtext" />
				</tal:formname>
				<input type="hidden" name="formid" value="none" 
					tal:attributes="value python: view.dbform and view.dbform.id or -1" />
				<label>Form Measures <span class="fieldRequired">required</span></label>
				<p class="description">
					Drag an available measure to the space below.  
					When a blue arrow appears, that measure will be added to your form.
				</p>
				<tal:currentMeasures repeat="measure view/curMeasures">
					<div class="measure" onmousedown="clicked(this)"
					    tal:attributes="id python:'measure-%i-div'%measure.id"
						inuse="true" onmouseover="entered(this)" onmouseout="exited(this)"
					 	onselect="test()" name="itema" UNSELECTABLE="ON">
						<div class="cover" tal:attributes="title measure/name" onselectstart="return false">
						</div>
						<img name="uparrow" class="uparrow"
							src="list-arrow.gif" style="display:none; margin-left: -60px;"/>
						<input type="hidden" name="measure" value="current" tal:attributes="value measure/id" />
						<div class="covered" onselectstart="return false">
							<tal:measurename tal:content="measure/guaranteedName" />
						</div>
					</div>
				</tal:currentMeasures>
			<div class="bottom" onmouseover="entered(this)" onmouseout="exited(this)" id="existbottom">
				<img name="uparrow"  class="uparrow"
					src="list-arrow.gif" style="display:none; margin-right: -60px;"/>
				<hr />
			</div>
			<label>QIC Only Form?</label><input type="checkbox" name="qiconly"  
			    tal:attributes="CHECKED python:view.dbform and view.dbform.qionly" />
			<br />
			<tal:forward define="
				value python:view.dbform and view.dbform.daysforwardwindow or ''; 
				inputkey string:forwardwindow; required python:False; fieldtext string:Days available early;
				description string:Enter the number of days this form will be available before each reporting period starts.  
				Leave blank for unlimited;" >
				<div metal:use-macro="context/@@inputmacro/macros/validatedtext" />
			</tal:forward>
			<tal:backward define="
				value python:view.dbform and view.dbform.daysbackwardwindow or ''; 
				inputkey string:backwardwindow; required python:False; fieldtext string:Days available late;
				description string:Enter the number of days this form will be available after each reporting period starts.  
				Leave blank for unlimited;" >
				<div metal:use-macro="context/@@inputmacro/macros/validatedtext" />
			</tal:backward>
			<input type="submit" value="Save" name="save" />
			</form>
		</div>
		
        </td>
        <td style="vertical-align:top">
		<div class="mainsection availablemeasures">
			<label>Available Measures</label>
			<fieldset>
			    <label for="filter">Filter</label>
			    <input type="text" id="filter" name="filter" onchange="filter()" />
		    </fieldset>
		    <div id="allavailmeasures">
			<tal:available repeat="measure view/availMeasures">
				<div class="measure" onmouseover="entered(this)" onmousedown="clicked(this)"
				    tal:attributes="id python:'measure-%i-div'%measure.id; name python:measure.name or measure.shortname; "
					inuse="false" onmouseout="exited(this)"
				 	onselect="test()" name="itemc" UNSELECTABLE="ON">
					<div class="cover" tal:attributes="title measure/name" onselectstart="return false">
					</div>
					<img name="uparrow" class="uparrow"
						src="list-arrow.gif" style="display:none; margin-right: -60px;"/>
					<input type="hidden" name="measure" value="available" tal:attributes="value measure/id" />
					<div class="covered" onselectstart="return false">
						<tal:measurename content="measure/guaranteedName">available item</tal:measurename>
					</div>
				</div>
			</tal:available>
			<div class="bottom" onmouseover="entered(this)" onmouseout="exited(this)" id="availbottom">
				<img name="uparrow"  class="uparrow"
					src="list-arrow.gif" style="display:none; margin-right: -60px;"/>
				<hr />
			</div>
		    </div>
		</div>
        </td>
        </tr>
        </table>
	</div>
</body>
</html>